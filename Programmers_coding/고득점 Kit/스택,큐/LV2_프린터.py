# -*- coding: utf-8 -*-
"""LV2_프린터

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ayy0A7qUMHnx8XpRtRDis3wXiAX1_tQX
"""

def solution(priorities, location):
    idx = [i for i in range(len(priorities))]
    prior = priorities.copy()
    
    i = 0

    while True:
        if prior[i] < max(prior[i+1:]):
            idx.append(idx.pop(i))
            prior.append(prior.pop(i))
        else:
            i += 1

        if prior == sorted(prior, reverse = True):
            break

    return idx.index(location) + 1

print(solution([2, 1, 3, 2], 2))
print(solution([1, 1, 9, 1, 1, 1], 0))

#deque를 쓰는 방식 시간복잡도가 위에 코드보다 반으로 줄음

from collections import deque

def solution(priorities, location):
    answer = 0

    d = deque([(v,i) for i,v in enumerate(priorities)])

    while len(d):
        item = d.popleft()
        if d and max(d)[0] > item[0]:
            d.append(item)
        else:
            answer += 1
            if item[1] == location:
                break
    return answer

  
print(solution([2, 1, 3, 2], 2))
print(solution([1, 1, 9, 1, 1, 1], 0))